/* script.js - Versión FINAL con API integrada y mejoras de usabilidad */
// MODIFICADO API: URL de tu API en la nube.
const API_URL = 'https://api-dental.onrender.com/api';

const jsPDF = window.jspdf && window.jspdf.jsPDF ? window.jspdf.jsPDF : window.jspdf;
let dienteSeleccionado = null;
let tratamientos = [];
let pacientes = [];
let descuentoPorcentaje = 0;
let totalConDescuento = 0;
let historiaClinica = {
  antecedentes: '',
  motivo: '',
  diagnostico: '',
  evolucion: [],
  radiografias: []
};
let pacienteActualId = null;
let usuarioActual = null; // ✅ NUEVO: Para guardar los datos del usuario logueado
let idioma = localStorage.getItem('idioma') || 'es';

// ✅ SISTEMA DE TRADUCCIÓN CENTRALIZADO
const traducciones = {
  es: {
    tituloPrincipal: '🦷 Software Dental Profesional',
    labelNombre: 'Nombre:', labelCorreo: 'Correo:', labelCelular: 'Celular:', labelEdad: 'Edad:', labelDoctor: 'Credenciales:', labelFecha: 'Fecha:',
    btnNuevo: 'Nuevo Paciente', btnBuscar: 'Buscar Paciente', btnGuardar: 'Guardar Paciente', btnLimpiar: 'Limpiar Odontograma',
    btnGestionTratamientos: '⚙️ Gestionar Tratamientos', tituloOdontograma: 'Odontograma (Nomenclatura FDI)', tituloTratamientos: 'Tratamientos Asignados',
    thDiente: 'Diente', thTratamiento: 'Tratamiento', thPrecio: 'Precio', thAcciones: 'Acciones', total: 'Total',
    placeholderBuscar: 'Buscar por nombre...', errorNombrePaciente: 'Por favor ingrese el nombre del paciente',
    pacienteGuardado: 'Paciente guardado correctamente', pacienteActualizado: 'Paciente actualizado correctamente',
    noPacientes: 'No hay pacientes registrados', confirmEliminarPaciente: '¿Está seguro de eliminar este paciente?',
    pacienteEliminado: 'Paciente eliminado correctamente', pacienteCargado: 'Paciente cargado correctamente',
    confirmNuevoPaciente: '¿Está seguro de crear un nuevo paciente? Se perderán los cambios no guardados.',
    listoNuevoPaciente: 'Listo para agregar un nuevo paciente', confirmLimpiarOdontograma: '¿Está seguro de limpiar el odontograma?',
    odontogramaLimpiado: 'Odontograma limpiado correctamente', errorPorcentajeValido: 'Por favor ingrese un porcentaje válido (0-100)',
    totalConDescuento: 'Total con descuento', evolucionGuardada: 'Evolución guardada correctamente',
    errorTratamiento: 'Por favor ingrese el tratamiento', evolucionRegistrada: 'Evolución registrada correctamente',
    errorNoEvolucion: 'No hay evolución registrada', errorSeleccionarArchivo: 'Por favor seleccione al menos un archivo',
    confirmEliminarRadiografia: '¿Está seguro de eliminar esta radiografía?', radiografiaEliminada: 'Radiografía eliminada correctamente',
    btnDescargar: 'Descargar', tituloModalAbono: 'Registrar Abono', labelFechaAbono: 'Fecha:', labelMontoAbono: 'Monto:',
    placeholderMontoAbono: '0.00', labelNotaAbono: 'Nota:', placeholderNotaAbono: 'Nota opcional', btnGuardarAbono: 'Guardar',
    errorMontoValido: 'Por favor ingrese un monto válido', abonoRegistrado: 'Abono registrado correctamente',
    tituloPresupuesto: 'Presupuesto Dental', labelDoctor: 'Doctor', adeudo: 'adeudo', aFavor: 'a favor',
    // ... añade aquí todas las demás traducciones que necesites
  },
  en: {
    tituloPrincipal: '🦷 Professional Dental Software', labelNombre: 'Name:', labelCorreo: 'Email:', labelCelular: 'Phone:', labelEdad: 'Age:', labelDoctor: 'Credentials:', labelFecha: 'Date:',
    btnNuevo: 'New Patient', btnBuscar: 'Find Patient', btnGuardar: 'Save Patient', btnLimpiar: 'Clear Odontogram',
    btnGestionTratamientos: '⚙️ Manage Treatments', tituloOdontograma: 'Odontogram (FDI Nomenclature)', tituloTratamientos: 'Assigned Treatments',
    thDiente: 'Tooth', thTratamiento: 'Treatment', thPrecio: 'Price', thAcciones: 'Actions', total: 'Total',
    placeholderBuscar: 'Search by name...', errorNombrePaciente: 'Please enter the patient\'s name',
    pacienteGuardado: 'Patient saved successfully', pacienteActualizado: 'Patient updated successfully',
    noPacientes: 'No registered patients', confirmEliminarPaciente: 'Are you sure you want to delete this patient?',
    pacienteEliminado: 'Patient deleted successfully', pacienteCargado: 'Patient loaded successfully',
    confirmNuevoPaciente: 'Are you sure you want to create a new patient? Unsaved changes will be lost.',
    listoNuevoPaciente: 'Ready to add a new patient', confirmLimpiarOdontograma: 'Are you sure you want to clear the odontogram?',
    odontogramaLimpiado: 'Odontogram cleared successfully', errorPorcentajeValido: 'Please enter a valid percentage (0-100)',
    totalConDescuento: 'Total with discount', evolucionGuardada: 'Evolution saved successfully',
    errorTratamiento: 'Please enter the treatment', evolucionRegistrada: 'Evolution registered successfully',
    errorNoEvolucion: 'No evolution registered', errorSeleccionarArchivo: 'Please select at least one file',
    confirmEliminarRadiografia: 'Are you sure you want to delete this radiograph?', radiografiaEliminada: 'Radiograph deleted successfully',
    btnDescargar: 'Download', tituloModalAbono: 'Register Payment', labelFechaAbono: 'Date:', labelMontoAbono: 'Amount:',
    placeholderMontoAbono: '0.00', labelNotaAbono: 'Note:', placeholderNotaAbono: 'Optional note', btnGuardarAbono: 'Save',
    errorMontoValido: 'Please enter a valid amount', abonoRegistrado: 'Payment registered successfully',
    tituloPresupuesto: 'Dental Estimate', labelDoctor: 'Doctor', adeudo: 'due', aFavor: 'credit',
  }
  // ... puedes añadir más idiomas aquí
};

// ✅ FUNCIÓN PARA OBTENER TEXTO TRADUCIDO
function getTexto(clave) {
  return traducciones[idioma][clave] || clave;
}

// ✅ FUNCIÓN PARA ACTUALIZAR TODOS LOS TEXTOS EN LA PÁGINA
function actualizarIdioma() {
  document.getElementById('titulo-principal').textContent = getTexto('tituloPrincipal');
  document.getElementById('label-nombre').textContent = getTexto('labelNombre');
  document.getElementById('label-correo').textContent = getTexto('labelCorreo');
  document.getElementById('label-celular').textContent = getTexto('labelCelular');
  document.getElementById('label-edad').textContent = getTexto('labelEdad');
  document.getElementById('label-doctor').textContent = getTexto('labelDoctor');
  document.getElementById('label-fecha').textContent = getTexto('labelFecha');
  document.getElementById('btn-nuevo').textContent = getTexto('btnNuevo');
  document.getElementById('btn-buscar').textContent = getTexto('btnBuscar');
  document.getElementById('btn-guardar').textContent = getTexto('btnGuardar');
  document.getElementById('btn-limpiar').textContent = getTexto('btnLimpiar');
  document.getElementById('btn-gestion-tratamientos').textContent = getTexto('btnGestionTratamientos');
  document.getElementById('titulo-odontograma').textContent = getTexto('tituloOdontograma');
  document.getElementById('titulo-tratamientos').textContent = getTexto('tituloTratamientos');
  document.getElementById('th-diente').textContent = getTexto('thDiente');
  document.getElementById('th-tratamiento').textContent = getTexto('thTratamiento');
  document.getElementById('th-precio').textContent = getTexto('thPrecio');
  document.getElementById('th-acciones').textContent = getTexto('thAcciones');
  document.getElementById('buscador-pacientes').placeholder = getTexto('placeholderBuscar');
  // ... continúa actualizando todos los elementos que tengan un ID
}

// ✅ MANEJADOR DE EVENTOS PARA EL CAMBIO DE IDIOMA
document.addEventListener('DOMContentLoaded', () => {
  const botonesIdioma = document.querySelectorAll('.btn-idioma-item');
  botonesIdioma.forEach(boton => {
    boton.addEventListener('click', (e) => {
      e.preventDefault();
      const nuevoIdioma = boton.dataset.idioma;
      if (nuevoIdioma) {
        idioma = nuevoIdioma;
        localStorage.setItem('idioma', idioma);
        document.getElementById('btn-idioma').textContent = boton.textContent.split(' ')[1];
        actualizarIdioma();
      }
    });
  });
});

// ... (El resto de tus variables y constantes globales no cambian) ...
const mapaTratamientos = {
  "Resina": { simbolo: "🪥", clase: "resina" }, "Extracción": { simbolo: "🔴", clase: "extraccion" }, "Implante": { simbolo: "⚪", clase: "implante" }, "Corona": { simbolo: "🦷", clase: "corona" },
  "Filling": { simbolo: "🪥", clase: "resina" }, "Extraction": { simbolo: "🔴", clase: "extraccion" }, "Implant": { simbolo: "⚪", clase: "implante" }, "Crown": { simbolo: "🦷", clase: "corona" },
};

const dientesAdultosSuperior = [18,17,16,15,14,13,12,11, 21,22,23,24,25,26,27,28];
const dientesAdultosInferior = [48,47,46,45,44,43,42,41, 31,32,33,34,35,36,37,38];
const dientesTemporalesSuperior = [55,54,53,52,51, 61,62,63,64,65];
const dientesTemporalesInferior = [85,84,83,82,81, 71,72,73,74,75];

// ✅ Imágenes reales - DIENTES PERMANENTES (11-48)
const IMAGENES_DIENTES_PERMANENTES = {
  11: "https://utfs.io/f/5BN0V4mlt4NUnNUYppXD4gRZpGckqudINzYHoSJ80Lxef57O", 12: "https://utfs.io/f/5BN0V4mlt4NUOIs39v6PNsLblzaKv5U1QEjxYIHfWDRJ7XSo", 13: "https://utfs.io/f/5BN0V4mlt4NU0V8yAvReXK1e7fx2toMJsnUB0SuRjmzqgk85", 14: "https://utfs.io/f/5BN0V4mlt4NUMBhx7tidyc538gnZeSE0T1rq2okvXVGzR96H", 15: "https://utfs.io/f/5BN0V4mlt4NUlTVZIWB0Lm1jND8A5svMyJbOHCQpwklPaiWK", 16: "https://utfs.io/f/5BN0V4mlt4NUhiFPSfVmf29XURODBcEq3deYjaixbCFJ7rSk", 17: "https://utfs.io/f/5BN0V4mlt4NUUAWhwfy1cuiEHpRa42vFsthdbTYZfAz8QKD6", 18: "https://utfs.io/f/5BN0V4mlt4NU46YPqMEX8vAzdB0fUp3eiFV5rP1bGcnZLxly", 21: "https://utfs.io/f/5BN0V4mlt4NUe6G02ShXdTtPbIQSl8AwLzBJ4HKqm0aYk6Nv", 22: "https://utfs.io/f/5BN0V4mlt4NUga78Rk66BqOy1kIKDulX9hfbSMRcVdnzC4ZA", 23: "https://utfs.io/f/5BN0V4mlt4NU4rFX5wpEX8vAzdB0fUp3eiFV5rP1bGcnZLxl", 24: "https://utfs.io/f/5BN0V4mlt4NUY7q64UOLeOq4DvtXzCRBycKuiUjboW5QFAIG", 25: "https://utfs.io/f/5BN0V4mlt4NUunf2RqA59gF0jSNiIaobTk63MY75pshlO2Vw", 26: "https://utfs.io/f/5BN0V4mlt4NUh2kdKWVmf29XURODBcEq3deYjaixbCFJ7rSk", 27: "https://utfs.io/f/5BN0V4mlt4NUmPo6C2ndxzUtKyGsF9JqRNCaY1Dw4EZmhOLT", 28: "https://utfs.io/f/5BN0V4mlt4NU2NI7UK4sQo0JTH7AukizlrgBVm35SqKPFYX1", 31: "https://utfs.io/f/5BN0V4mlt4NUvTINLRgBR16k35MnVrP0c7Ga2UAXCSLEINHZ", 32: "https://utfs.io/f/5BN0V4mlt4NU9Hw1KcoBQTn7AuyhxYLzkWvC4j5sVSU3IeGw", 33: "https://utfs.io/f/5BN0V4mlt4NU7KzSE75pLDr6ig2VBIX0cFltA5mjbJwMHaN1", 34: "https://utfs.io/f/5BN0V4mlt4NUhu3gfFBVmf29XURODBcEq3deYjaixbCFJ7rS", 35: "https://utfs.io/f/5BN0V4mlt4NU8xNgpPupU65JDEFiRj97n2lrQyNcobuZdm3s", 36: "https://utfs.io/f/5BN0V4mlt4NU8Yh3yqupU65JDEFiRj97n2lrQyNcobuZdm3s", 37: "https://utfs.io/f/5BN0V4mlt4NUsDSJELlNYxrdB2pXWune8Et3HLT9vKyR5bOG", 38: "https://utfs.io/f/5BN0V4mlt4NURyvOK1ZVHgi3IwrhbkdUz4Ql7nP8S1mBjRuE", 41: "https://utfs.io/f/5BN0V4mlt4NULX7VpCDKRkDx1UI07uyMbS3wvZWCaH6nolme", 42: "https://utfs.io/f/5BN0V4mlt4NUnhHcUnXD4gRZpGckqudINzYHoSJ80Lxef57O", 43: "https://utfs.io/f/5BN0V4mlt4NUkbWr2iKcYeEWHJagI08DSuKnXwL9ZRzGv7xy", 44: "https://utfs.io/f/5BN0V4mlt4NUw8oE7OJEvHaeJkps951bVfunNqPDtzMjSdcR", 45: "https://utfs.io/f/5BN0V4mlt4NUlX7svJB0Lm1jND8A5svMyJbOHCQpwklPaiWK", 46: "https://utfs.io/f/5BN0V4mlt4NUVBr3F58SCIW2EdUXm9zrBTZogQ5HR6nkVpPJ", 47: "https://utfs.io/f/5BN0V4mlt4NUnjAscdQXD4gRZpGckqudINzYHoSJ80Lxef57", 48: "https://utfs.io/f/5BN0V4mlt4NU7valOapLDr6ig2VBIX0cFltA5mjbJwMHaN1U"
};

// ✅ Imágenes reales - DIENTES TEMPORALES (51-85)
const IMAGENES_DIENTES_TEMPORALES = {
  51: "https://utfs.io/f/5BN0V4mlt4NUeOUNEzhXdTtPbIQSl8AwLzBJ4HKqm0aYk6Nv", 52: "https://utfs.io/f/5BN0V4mlt4NUXQyWJj3ikVqSE2R0lvYyWceT5uxfm3UMzsrB", 53: "https://utfs.io/f/5BN0V4mlt4NUrYi3IbGz5NPcaAgwizpdKqn4rb3Q1IHGDuV6", 54: "https://utfs.io/f/5BN0V4mlt4NU3VbzmOj6Jy2pdlUv0WDFR5fOBtkEiPmZCNQ9", 55: "https://utfs.io/f/5BN0V4mlt4NUm1jcwHndxzUtKyGsF9JqRNCaY1Dw4EZmhOLT", 61: "https://utfs.io/f/5BN0V4mlt4NUoUSA9K7Ra4Yu6KWb18xgTpVGjSBHieoZOQzU", 62: "https://utfs.io/f/5BN0V4mlt4NUS2KFZ2NlVg6pqOXDdhwYsGCTZ8mbkI0cAWae", 63: "https://utfs.io/f/5BN0V4mlt4NUk1dbmAKcYeEWHJagI08DSuKnXwL9ZRzGv7xy", 64: "https://utfs.io/f/5BN0V4mlt4NUJ6yUwntvGqKoVFrLehBNUdQRSHzCijwgbE2v", 65: "https://utfs.io/f/5BN0V4mlt4NU2AJG7V4sQo0JTH7AukizlrgBVm35SqKPFYX1", 71: "https://utfs.io/f/5BN0V4mlt4NUm397hOgndxzUtKyGsF9JqRNCaY1Dw4EZmhOL", 72: "https://utfs.io/f/5BN0V4mlt4NUpZ2U87kLw9yMHK4F5tXqaNhSAE8ijboR2ecu", 73: "https://utfs.io/f/5BN0V4mlt4NUh5fXc8Vmf29XURODBcEq3deYjaixbCFJ7rSk", 74: "https://utfs.io/f/5BN0V4mlt4NUcky5Odz7aELj6pnFhwbNzH9I4D58t0OSC73m", 75: "https://utfs.io/f/5BN0V4mlt4NUmMcJqZndxzUtKyGsF9JqRNCaY1Dw4EZmhOLT", 81: "https://utfs.io/f/5BN0V4mlt4NUHR5bhywJawI05ZiQ2fKRPnjdOV4lGbr3ATFx", 82: "https://utfs.io/f/5BN0V4mlt4NUlm6jSLB0Lm1jND8A5svMyJbOHCQpwklPaiWK", 83: "https://utfs.io/f/5BN0V4mlt4NU7ZBGFjpLDr6ig2VBIX0cFltA5mjbJwMHaN1U", 84: "https://utfs.io/f/5BN0V4mlt4NULmgh8jDKRkDx1UI07uyMbS3wvZWCaH6nolme", 85: "https://utfs.io/f/5BN0V4mlt4NUe88GdMfhXdTtPbIQSl8AwLzBJ4HKqm0aYk6N"
};

function obtenerSimboloYClase(tratamiento) {
  return mapaTratamientos[tratamiento] || { simbolo: "•", clase: "con-tratamiento" };
}

function sanitizarNombre(nombre) { return (nombre || 'sin_nombre').replace(/[<>:"/\\|?*]+/g, '_').replace(/\s+/g, '_'); }
function quitarAcentos(texto) { if (!texto) return ''; return texto.normalize('NFD').replace(/[\u0300-\u036f]/g, ''); }
function limpiarTextoExport(texto) { if (texto === undefined || texto === null) return ''; return String(texto); }
function formatearFechaDDMMYYYY(fechaISO) { if (!fechaISO) return ''; const [año, mes, dia] = fechaISO.split('-'); return `${dia}/${mes}/${año}`; }
function parsearFechaDDMMYYYY(fechaStr) { if (!fechaStr) return ''; const partes = fechaStr.split('/'); if (partes.length !== 3) return ''; const [dia, mes, año] = partes; const fecha = new Date(`${año}-${mes}-${dia}`); if (isNaN(fecha)) return ''; return fecha.toISOString().split('T')[0]; }

function actualizarDiente(num) {
  const dienteEl = document.querySelector(`.contenedor-diente[data-numero="${num}"]`);
  if (!dienteEl) return;
  const tratamientosDiente = tratamientos.filter(t => t.diente == num);
  if (tratamientosDiente.length > 0) {
    const ultimo = tratamientosDiente[tratamientosDiente.length - 1];
    const { simbolo, clase } = obtenerSimboloYClase(ultimo.tratamiento);
    const overlay = dienteEl.querySelector('.overlay-diente');
    if (overlay) { overlay.textContent = simbolo; }
    dienteEl.className = 'contenedor-diente ' + clase;
    const tooltip = tratamientosDiente.map(t => `${t.tratamiento} ($${t.precio})`).join('\n');
    dienteEl.dataset.tooltip = tooltip;
  } else {
    const overlay = dienteEl.querySelector('.overlay-diente');
    if (overlay) { overlay.textContent = num; }
    dienteEl.className = 'contenedor-diente';
    dienteEl.dataset.tooltip = '';
  }
}

function dibujarOdontograma() {
  const supAdultos = document.getElementById('superior-adultos'); const supTemporales = document.getElementById('superior-temporales'); const infTemporales = document.getElementById('inferior-temporales'); const infAdultos = document.getElementById('inferior-adultos');
  if (!supAdultos || !supTemporales || !infTemporales || !infAdultos) return;
  supAdultos.innerHTML = ''; supTemporales.innerHTML = ''; infTemporales.innerHTML = ''; infAdultos.innerHTML = '';
  const supDerAdultos = dientesAdultosSuperior.slice(0, 8); const supIzqAdultos = dientesAdultosSuperior.slice(8); const supDerTemporales = dientesTemporalesSuperior.slice(0, 5); const supIzqTemporales = dientesTemporalesSuperior.slice(5); const infDerTemporales = dientesTemporalesInferior.slice(0, 5); const infIzqTemporales = dientesTemporalesInferior.slice(5); const infDerAdultos = dientesAdultosInferior.slice(0, 8); const infIzqAdultos = dientesAdultosInferior.slice(8);
  function crearCuadrante(dientes, esTemporal = false) { const div = document.createElement('div'); div.className = 'cuadrante'; dientes.forEach(num => { const diente = document.createElement('div'); diente.className = 'contenedor-diente'; diente.dataset.numero = num; diente.setAttribute('role', 'button'); diente.setAttribute('tabindex', '0'); diente.setAttribute('aria-label', `Diente ${num}`); const esPermanente = num >= 11 && num <= 48; const esTemporalReal = num >= 51 && num <= 85; let imagenSrc = null; if (esPermanente && IMAGENES_DIENTES_PERMANENTES[num]) { imagenSrc = IMAGENES_DIENTES_PERMANENTES[num]; } else if (esTemporalReal && IMAGENES_DIENTES_TEMPORALES[num]) { imagenSrc = IMAGENES_DIENTES_TEMPORALES[num]; } if (imagenSrc) { const img = document.createElement('img'); img.src = imagenSrc; img.alt = `Diente ${num}`; img.classList.add('imagen-diente'); img.onerror = function() { this.outerHTML = `<svg viewBox="0 0 100 130" class="imagen-diente"><path d="M50,10 C60,10 70,20 70,40 C70,60 65,80 50,90 C35,80 30,60 30,40 C30,20 40,10 50,10 Z" fill="var(--diente-fondo)" stroke="#555" stroke-width="2"/><text x="50%" y="70%" text-anchor="middle" font-size="16" font-weight="bold" fill="var(--texto)">${num}</text></svg>`; }; diente.appendChild(img); const numeroEtiqueta = document.createElement('div'); numeroEtiqueta.className = 'numero-diente-etiqueta'; numeroEtiqueta.textContent = num; diente.appendChild(numeroEtiqueta); } else { const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'); svg.setAttribute('viewBox', '0 0 100 130'); svg.classList.add('imagen-diente'); const use = document.createElementNS('http://www.w3.org/2000/svg', 'use'); use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `#diente-${num}`); svg.appendChild(use); const overlay = document.createElement('div'); overlay.className = 'overlay-diente'; overlay.textContent = num; diente.appendChild(overlay); } diente.onclick = () => seleccionarDiente(num); div.appendChild(diente); }); return div; }
  supAdultos.appendChild(crearCuadrante(supDerAdultos, false)); supAdultos.appendChild(crearCuadrante(supIzqAdultos, false)); supTemporales.appendChild(crearCuadrante(supDerTemporales, true)); supTemporales.appendChild(crearCuadrante(supIzqTemporales, true)); infTemporales.appendChild(crearCuadrante(infDerTemporales, true)); infTemporales.appendChild(crearCuadrante(infIzqTemporales, true)); infAdultos.appendChild(crearCuadrante(infDerAdultos, false)); infAdultos.appendChild(crearCuadrante(infIzqAdultos, false));
}

function seleccionarDiente(num) {
  dienteSeleccionado = num; document.getElementById('dienteActual').textContent = num; const contenedor = document.getElementById('opciones-tratamientos'); contenedor.innerHTML = '';
  // ✅ USAMOS LA LISTA GLOBAL CARGADA DESDE LA API
  const listaActual = window.tratamientosGlobales || [];
  listaActual.forEach(t => { const div = document.createElement('div'); div.className = 'opcion-tratamiento'; div.setAttribute('role', 'button'); div.setAttribute('tabindex', '0'); div.innerHTML = `<span>${t.nombre}</span> <span>$${t.precio}</span>`; div.onclick = () => aplicarTratamiento(t.nombre, t.precio); contenedor.appendChild(div); });
  document.getElementById('modalTratamiento').style.display = 'flex';
}

function aplicarTratamiento(nombre, precio) { if (!dienteSeleccionado) return; tratamientos.push({ diente: dienteSeleccionado, tratamiento: nombre, precio: precio }); renderizarTratamientos(); actualizarDiente(dienteSeleccionado); cerrarModalTratamientos(); }
function cerrarModalTratamientos() { document.getElementById('modalTratamiento').style.display = 'none'; dienteSeleccionado = null; }

// ✅ NUEVAS FUNCIONES PARA TRATAMIENTOS GENERALES PERSONALIZADOS
function abrirModalTratamientoGeneral() { let modal = document.getElementById('modalTratamientoGeneralPersonalizado'); if (!modal) { modal = document.createElement('div'); modal.id = 'modalTratamientoGeneralPersonalizado'; modal.className = 'modal'; modal.innerHTML = `<div class="modal-content"><h3 id="titulo-modal-tratamiento-general-personalizado">Agregar Tratamiento General</h3><label id="label-tratamiento-general">Tratamiento:</label><input type="text" id="tratamiento-general" placeholder="Nombre del tratamiento" /><label id="label-precio-general">Precio:</label><input type="number" id="precio-general" placeholder="0.00" step="0.01" min="0" /><br><br><button class="btn-guardar" onclick="guardarTratamientoGeneralPersonalizado()">Agregar</button><button class="btn-cerrar" onclick="cerrarModalTratamientoGeneralPersonalizado()">Cancelar</button></div>`; document.body.appendChild(modal); } document.getElementById('tratamiento-general').value = ''; document.getElementById('precio-general').value = ''; modal.style.display = 'flex'; }
function cerrarModalTratamientoGeneralPersonalizado() { const modal = document.getElementById('modalTratamientoGeneralPersonalizado'); if (modal) modal.style.display = 'none'; }
function guardarTratamientoGeneralPersonalizado() { const nombre = document.getElementById('tratamiento-general').value.trim(); const precio = parseFloat(document.getElementById('precio-general').value); if (!nombre) { mostrarNotificacion('Por favor ingrese un nombre para el tratamiento', 'error'); return; } if (isNaN(precio) || precio < 0) { mostrarNotificacion('Por favor ingrese un precio válido', 'error'); return; } tratamientos.push({ diente: 'General', tratamiento: nombre, precio: precio }); renderizarTratamientos(); cerrarModalTratamientoGeneralPersonalizado(); mostrarNotificacion('Tratamiento general agregado correctamente'); }

window.addEventListener('click', (event) => { const modales = ['modalTratamiento', 'modalPacientes', 'modalHistoria', 'modalRadiografias', 'modalEvolucion', 'modalAdeudos', 'modalAbono', 'modalAmpliarRadio', 'modalCargaExcel', 'modalGestionTratamientos', 'modalNuevoTratamiento', 'modalTratamientoGeneralPersonalizado']; modales.forEach(id => { const modal = document.getElementById(id); if (modal && event.target === modal) { modal.style.display = 'none'; if (id === 'modalTratamiento') dienteSeleccionado = null; } }); });

function renderizarTratamientos() { const tbody = document.getElementById('cuerpo-tabla'); tbody.innerHTML = ''; let total = 0; tratamientos.forEach((t, i) => { const tr = document.createElement('tr'); const precioText = `$${Number(t.precio || 0).toFixed(2)}`; tr.innerHTML = `<td>${t.diente}</td><td>${t.tratamiento}</td><td>${precioText}</td><td><button onclick="eliminarTratamiento(${i})">Eliminar</button><button class="btn-historia-mini" onclick="agregarATratamientoAHistoria(${i})">A Evolución</button></td>`; tbody.appendChild(tr); total += Number(t.precio || 0); }); document.getElementById('total-monto').textContent = total.toFixed(2); if (descuentoPorcentaje > 0) { totalConDescuento = total * (1 - descuentoPorcentaje / 100); document.getElementById('total-con-descuento').textContent = `Total con descuento: $${totalConDescuento.toFixed(2)}`; } else { document.getElementById('total-con-descuento').textContent = ''; totalConDescuento = total; } }
function eliminarTratamiento(index) { const diente = tratamientos[index] ? tratamientos[index].diente : null; tratamientos.splice(index, 1); renderizarTratamientos(); if (diente !== null) actualizarDiente(diente); }

// ✅ MODIFICADO API: Función para cargar pacientes desde el servidor
async function cargarPacientesDesdeAPI() { try { const token = localStorage.getItem('token'); if (!token) { console.error('No hay token, redirigiendo a login'); return; } const response = await fetch(`${API_URL}/pacientes`, { headers: { 'Authorization': `Bearer ${token}` } }); if (!response.ok) throw new Error('Error al cargar pacientes'); pacientes = await response.json(); console.log('Pacientes cargados desde la API:', pacientes); } catch (error) { console.error('Error:', error); mostrarNotificacion('Error al conectar con el servidor. Revisa tu conexión.', 'error'); pacientes = []; } }

// ✅ MODIFICADO API: Función para guardar un paciente (crear o actualizar)
async function guardarPacienteEnAPI(pacienteData) { try { const token = localStorage.getItem('token'); let response; if (pacienteActualId) { response = await fetch(`${API_URL}/pacientes/${pacienteActualId}`, { method: 'PUT', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(pacienteData) }); } else { response = await fetch(`${API_URL}/pacientes`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(pacienteData) }); } if (!response.ok) throw new Error('Error al guardar el paciente'); const pacienteGuardado = await response.json(); pacienteActualId = pacienteGuardado._id; await cargarPacientesDesdeAPI(); return pacienteGuardado; } catch (error) { console.error('Error:', error); mostrarNotificacion('Error al guardar el paciente. Inténtalo de nuevo.', 'error'); return null; } }

// ✅ MODIFICADO API: La función guardarPaciente ahora llama a la API
async function guardarPaciente() { const nombre = document.getElementById('nombre').value.trim(); if (!nombre) { mostrarNotificacion(getTexto('errorNombrePaciente'), 'error'); return; } const pacienteData = { nombre, correo: document.getElementById('correo').value, celular: document.getElementById('celular').value, edad: document.getElementById('edad').value, doctor: document.getElementById('doctor').value, fecha: document.getElementById('fecha').value, tratamientos: [...tratamientos], historiaClinica: { antecedentes: document.getElementById('antecedentes').value || '', motivo: document.getElementById('motivo').value || '', diagnostico: document.getElementById('diagnostico').value || '', evolucion: Array.isArray(historiaClinica.evolucion) ? [...historiaClinica.evolucion] : [], radiografias: Array.isArray(historiaClinica.radiografias) ? [...historiaClinica.radiografias] : [] } }; const resultado = await guardarPacienteEnAPI(pacienteData); if (resultado) { mostrarNotificacion(pacienteActualId ? getTexto('pacienteActualizado') : getTexto('pacienteGuardado')); } }

// ✅ MODIFICADO API: La función mostrarListaPacientes ahora carga desde la API
async function mostrarListaPacientes() { await cargarPacientesDesdeAPI(); const contenedor = document.getElementById('lista-pacientes-modal'); const buscador = document.getElementById('buscador-pacientes'); contenedor.innerHTML = ''; if (buscador) buscador.value = ''; if (pacientes.length === 0) { contenedor.innerHTML = `<p>${getTexto('noPacientes')}</p>`; } else { pacientes.forEach(p => { const div = document.createElement('div'); div.className = 'paciente-item'; div.dataset.nombre = (p.nombre || '').toLowerCase(); div.innerHTML = `<div><strong>${p.nombre}</strong><br><small>${p.fecha || ''}</small></div><button class="btn-eliminar" onclick="eliminarPaciente('${p._id}')">${getTexto('btnEliminar')}</button>`; div.querySelector('div').onclick = () => cargarPaciente(p); contenedor.appendChild(div); }); } document.getElementById('modalPacientes').style.display = 'flex'; }

// ✅ MEJORA: Función para filtrar pacientes en tiempo real
function filtrarPacientes() { const query = document.getElementById('buscador-pacientes')?.value.toLowerCase() || ''; const items = document.querySelectorAll('.paciente-item'); items.forEach(item => { const nombre = item.dataset.nombre || ''; item.style.display = nombre.includes(query) ? 'flex' : 'none'; }); }

// ✅ MODIFICADO API: La función eliminarPaciente ahora llama a la API
async function eliminarPaciente(id) { if (confirm(getTexto('confirmEliminarPaciente'))) { const token = localStorage.getItem('token'); try { const response = await fetch(`${API_URL}/pacientes/${id}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } }); if (!response.ok) throw new Error('Error al eliminar el paciente'); await cargarPacientesDesdeAPI(); mostrarListaPacientes(); mostrarNotificacion(getTexto('pacienteEliminado')); } catch (error) { console.error('Error:', error); mostrarNotificacion('Error al eliminar el paciente.', 'error'); } } }

function cerrarModalPacientes() { document.getElementById('modalPacientes').style.display = 'none'; }
function cargarPaciente(paciente) { document.getElementById('nombre').value = paciente.nombre; document.getElementById('correo').value = paciente.correo; document.getElementById('celular').value = paciente.celular; document.getElementById('edad').value = paciente.edad; document.getElementById('doctor').value = paciente.doctor; document.getElementById('fecha').value = paciente.fecha; tratamientos = paciente.tratamientos || []; renderizarTratamientos(); dibujarOdontograma(); if (paciente.historiaClinica) { historiaClinica = { ...paciente.historiaClinica }; } else { historiaClinica = { antecedentes: '', motivo: '', diagnostico: '', evolucion: [], radiografias: [] }; } pacienteActualId = paciente._id; cerrarModalPacientes(); mostrarNotificacion(getTexto('pacienteCargado')); }
function nuevoPaciente() { if (tratamientos.length > 0) { if (!confirm(getTexto('confirmNuevoPaciente'))) return; } document.querySelectorAll('input').forEach(inp => inp.value = ''); tratamientos = []; descuentoPorcentaje = 0; document.getElementById('descuento-porcentaje').value = ''; historiaClinica = { antecedentes: '', motivo: '', diagnostico: '', evolucion: [], radiografias: [] }; pacienteActualId = null; renderizarTratamientos(); dibujarOdontograma(); const hoy = new Date().toISOString().split('T')[0]; document.getElementById('fecha').value = hoy; mostrarNotificacion(getTexto('listoNuevoPaciente')); }
function limpiarOdontograma() { if (confirm(getTexto('confirmLimpiarOdontograma'))) { tratamientos = []; descuentoPorcentaje = 0; document.getElementById('descuento-porcentaje').value = ''; renderizarTratamientos(); dibujarOdontograma(); mostrarNotificacion(getTexto('odontogramaLimpiado')); } function aplicarDescuento() { const input = document.getElementById('descuento-porcentaje'); const valor = parseFloat(input.value); if (isNaN(valor) || valor < 0 || valor > 100) { mostrarNotificacion(getTexto('errorPorcentajeValido'), 'error'); return; } descuentoPorcentaje = valor; renderizarTratamientos(); }
function abrirHistoriaClinica() { renderizarEvolucion(); document.getElementById('modalHistoria').style.display = 'flex'; } function cerrarHistoriaClinica() { guardarHistoriaAutomaticamente(); document.getElementById('modalHistoria').style.display = 'none'; } function guardarHistoriaAutomaticamente() { const nombre = document.getElementById('nombre').value.trim(); if (!nombre) return; const index = pacientes.findIndex(p => p._id === pacienteActualId); if (index !== -1) { pacientes[index].historiaClinica = { ...historiaClinica, antecedentes: document.getElementById('antecedentes').value || '', diagnostico: document.getElementById('diagnostico').value || '' }; guardarPacienteEnAPI(pacientes[index]); } } function guardarHistoria() { guardarHistoriaAutomaticamente(); mostrarNotificacion(getTexto('evolucionGuardada')); } function abrirRadiografias() { renderizarRadiografias(); document.getElementById('modalRadiografias').style.display = 'flex'; } function cerrarRadiografias() { document.getElementById('modalRadiografias').style.display = 'none'; } function abrirModalEvolucion() { document.getElementById('fecha-evolucion').value = new Date().toISOString().split('T')[0]; document.getElementById('tratamiento-evolucion').value = ''; document.getElementById('diente-evolucion').value = ''; document.getElementById('costo-evolucion').value = ''; document.getElementById('abono-evolucion').value = ''; document.getElementById('modalEvolucion').style.display = 'flex'; } function cerrarModalEvolucion() { document.getElementById('modalEvolucion').style.display = 'none'; } function guardarEvolucion() { const evolucion = { tipo: 'tratamiento', fecha: document.getElementById('fecha-evolucion').value, tratamiento: document.getElementById('tratamiento-evolucion').value, diente: document.getElementById('diente-evolucion').value, costo: parseFloat(document.getElementById('costo-evolucion').value) || 0, abono: parseFloat(document.getElementById('abono-evolucion').value) || 0 }; if (!evolucion.tratamiento) { mostrarNotificacion(getTexto('errorTratamiento'), 'error'); return; } historiaClinica.evolucion.push(evolucion); renderizarEvolucion(); cerrarModalEvolucion(); mostrarNotificacion(getTexto('evolucionRegistrada')); guardarHistoriaAutomaticamente(); } function renderizarEvolucion() { const tbody = document.getElementById('cuerpo-evolucion'); if (!tbody) return; tbody.innerHTML = ''; let saldoAcumulado = 0; historiaClinica.evolucion.forEach((e, i) => { if (e.tipo === 'abono') { saldoAcumulado -= Number(e.monto || 0); } else { saldoAcumulado += (Number(e.costo || 0) - Number(e.abono || 0)); } const tr = document.createElement('tr'); const saldoFormateado = `$${Math.abs(saldoAcumulado).toFixed(2)} ${saldoAcumulado > 0 ? getTexto('adeudo') : getTexto('aFavor')}`; const fechaFormateada = formatearFechaDDMMYYYY(e.fecha); const fechaEditable = `<span class="fecha-evol">${fechaFormateada}</span><button class="btn-editar btn-editar-fecha" onclick="editarFechaEvolucion(${i})">✏️</button>`; if (e.tipo === 'abono') { tr.innerHTML = `<td>${fechaEditable}</td><td>Abono${e.nota ? ': ' + e.nota : ''}</td><td>—</td><td>—</td><td>$${Number(e.monto || 0).toFixed(2)}</td><td style="color: ${saldoAcumulado > 0 ? '#e74c3c' : '#27ae60'}">${saldoFormateado}</td><td><button onclick="eliminarEvolucion(${i})">${getTexto('btnEliminar')}</button></td>`; } else { tr.innerHTML = `<td>${fechaEditable}</td><td>${e.tratamiento}</td><td>${e.diente}</td><td>$${Number(e.costo || 0).toFixed(2)}</td><td>$${Number(e.abono || 0).toFixed(2)}</td><td style="color: ${saldoAcumulado > 0 ? '#e74c3c' : '#27ae60'}">${saldoFormateado}</td><td><button onclick="eliminarEvolucion(${i})">${getTexto('btnEliminar')}</button></td>`; } tbody.appendChild(tr); }); } function editarFechaEvolucion(index) { const evol = historiaClinica.evolucion[index]; if (!evol) return; const fechaActual = formatearFechaDDMMYYYY(evol.fecha); const nuevaFechaStr = prompt(getTexto('promptNuevaFecha'), fechaActual); if (nuevaFechaStr !== null) { const nuevaFechaISO = parsearFechaDDMMYYYY(nuevaFechaStr); if (nuevaFechaISO) { evol.fecha = nuevaFechaISO; renderizarEvolucion(); guardarHistoriaAutomaticamente(); mostrarNotificacion(getTexto('fechaActualizada')); } else { mostrarNotificacion(getTexto('errorFormatoFecha'), 'error'); } } } function eliminarEvolucion(index) { historiaClinica.evolucion.splice(index, 1); renderizarEvolucion(); guardarHistoriaAutomaticamente(); } function agregarATratamientoAHistoria(index) { const t = tratamientos[index]; document.querySelectorAll('.modal').forEach(modal => { if (modal.id !== 'modalHistoria') modal.style.display = 'none'; }); document.getElementById('fecha-evolucion').value = new Date().toISOString().split('T')[0]; document.getElementById('tratamiento-evolucion').value = t.tratamiento; document.getElementById('diente-evolucion').value = t.diente; document.getElementById('costo-evolucion').value = t.precio; document.getElementById('abono-evolucion').value = '0'; document.getElementById('modalEvolucion').style.display = 'flex'; } function abrirModalAbono() { let modal = document.getElementById('modalAbono'); if (!modal) { modal = document.createElement('div'); modal.id = 'modalAbono'; modal.className = 'modal'; modal.innerHTML = `<div class="modal-content"><h3>${getTexto('tituloModalAbono')}</h3><label>${getTexto('labelFechaAbono')}:</label><input type="date" id="fecha-abono"><label>${getTexto('labelMontoAbono')}:</label><input type="number" id="monto-abono" placeholder="${getTexto('placeholderMontoAbono')}" step="0.01" min="0"><label>${getTexto('labelNotaAbono')}:</label><input type="text" id="nota-abono" placeholder="${getTexto('placeholderNotaAbono')}"><br><br><button class="btn-guardar" onclick="guardarAbono()">${getTexto('btnGuardarAbono')}</button><button class="btn-cerrar" onclick="cerrarModalAbono()">${getTexto('btnCancelar')}</button></div>`; document.body.appendChild(modal); } document.getElementById('fecha-abono').value = new Date().toISOString().split('T')[0]; document.getElementById('monto-abono').value = ''; document.getElementById('nota-abono').value = ''; modal.style.display = 'flex'; } function cerrarModalAbono() { const modal = document.getElementById('modalAbono'); if (modal) modal.style.display = 'none'; } function guardarAbono() { const monto = parseFloat(document.getElementById('monto-abono').value); if (isNaN(monto) || monto <= 0) { mostrarNotificacion(getTexto('errorMontoValido'), 'error'); return; } const abono = { tipo: 'abono', fecha: document.getElementById('fecha-abono').value, monto: monto, nota: document.getElementById('nota-abono').value.trim() }; historiaClinica.evolucion.push(abono); renderizarEvolucion(); cerrarModalAbono(); mostrarNotificacion(getTexto('abonoRegistrado')); guardarHistoriaAutomaticamente(); } function subirRadiografias() { const input = document.getElementById('archivo-radiografia'); const files = input.files; if (!files || files.length === 0) { mostrarNotificacion(getTexto('errorSeleccionarArchivo'), 'error'); return; } for (let file of files) { const reader = new FileReader(); reader.onload = (e) => { const radiografia = { nombre: file.name, data: e.target.result, fecha: new Date().toISOString().split('T')[0], tipo: file.type || 'application/octet-stream' }; historiaClinica.radiografias.push(radiografia); renderizarRadiografias(); guardarHistoriaAutomaticamente(); }; reader.readAsDataURL(file); } input.value = ''; } function renderizarRadiografias() { const galeria = document.getElementById('galeria-radiografias'); galeria.innerHTML = ''; historiaClinica.radiografias.forEach((rad, i) => { const div = document.createElement('div'); div.className = 'miniatura'; const safeName = sanitizarNombre(rad.nombre); if (rad.data && rad.data.startsWith('data:image/')) { div.innerHTML = `<button class="eliminar-radio" onclick="eliminarRadiografia(${i})">🗑️</button><img src="${rad.data}" alt="${rad.nombre}" onclick="ampliarRadiografia('${rad.data}', 'image')"><div class="nombre">${rad.nombre}<br><small>${rad.fecha}</small></div>`; } else if (rad.data && rad.data.startsWith('data:application/pdf')) { div.innerHTML = `<button class="eliminar-radio" onclick="eliminarRadiografia(${i})">🗑️</button><div style="height:120px; display:flex; align-items:center; background:#f1f1f1; font-size:20px; cursor:pointer;" onclick="ampliarRadiografia('${rad.data}', 'pdf')">📄 ${rad.nombre}</div><div class="nombre">${rad.nombre}<br><small>${rad.fecha}</small></div>`; } else if (rad.data) { div.innerHTML = `<button class="eliminar-radio" onclick="eliminarRadiografia(${i})">🗑️</button><div style="height:120px; display:flex; align-items:center; background:#f1f1f1; font-size:16px; cursor:pointer; padding:12px;"><div><div style="font-size:28px; margin-bottom:6px;">📎</div><div style="font-size:13px; max-width:120px; word-wrap:break-word;">${rad.nombre}</div><div style="margin-top:6px;"><button onclick="descargarArchivoRadiografia(${i}); event.stopPropagation();">⬇️ ${getTexto('btnDescargar')}</button></div></div></div><div class="nombre">${rad.nombre}<br><small>${rad.fecha}</small></div>`; } else { div.innerHTML = `<div class="nombre">Archivo no disponible</div>`; } galeria.appendChild(div); }); } function eliminarRadiografia(index) { if (confirm(getTexto('confirmEliminarRadiografia'))) { historiaClinica.radiografias.splice(index, 1); renderizarRadiografias(); mostrarNotificacion(getTexto('radiografiaEliminada')); guardarHistoriaAutomaticamente(); } } function ampliarRadiografia(src, tipo) { let modal = document.getElementById('modalAmpliarRadio'); if (!modal) { modal = document.createElement('div'); modal.id = 'modalAmpliarRadio'; modal.innerHTML = `<span class="close" onclick="document.getElementById('modalAmpliarRadio').style.display='none'">&times;</span><img id="imagenAmpliada" class="imagen-ampliada" style="display:none;"><iframe id="pdfAmpliado" style="width:90%; height:90%; margin-top:5%; display:none;"></iframe><a id="descargaArchivo" style="display:none; color:white; text-align:center; margin-top:20px; font-size:18px;" download>⬇️ ${getTexto('btnDescargarArchivo')}</a>`; document.body.appendChild(modal); } const img = document.getElementById('imagenAmpliada'); const iframe = document.getElementById('pdfAmpliado'); const descarga = document.getElementById('descargaArchivo'); if (tipo === 'image') { img.src = src; img.style.display = 'block'; iframe.style.display = 'none'; descarga.style.display = 'none'; } else if (tipo === 'pdf') { iframe.src = src; iframe.style.display = 'block'; img.style.display = 'none'; descarga.style.display = 'none'; } else { img.style.display = 'none'; iframe.style.display = 'none'; descarga.href = src; descarga.style.display = 'block'; descarga.textContent = `⬇️ ${getTexto('btnDescargarArchivo')}`; } modal.style.display = 'flex'; } function descargarArchivoRadiografia(index) { const rad = historiaClinica.radiografias[index]; if (!rad || !rad.data) return; const link = document.createElement('a'); link.href = rad.data; link.download = sanitizarNombre(rad.nombre); document.body.appendChild(link); link.click(); link.remove(); } async function exportarPDF() { const doc = new jsPDF(); const pageWidth = doc.internal.pageSize.getWidth(); doc.setFontSize(18); doc.text(quitarAcentos(getTexto('tituloPresupuesto')), pageWidth / 2, 20, { align: 'center' }); doc.setFontSize(14); doc.text(`Paciente: ${limpiarTextoExport(document.getElementById('nombre').value) || 'N/A'}`, 20, 36); doc.text(`${getTexto('labelDoctor')}: ${limpiarTextoExport(document.getElementById('doctor').value) || 'N/A'}`, 20, 44); doc.text(`Fecha: ${limpiarTextoExport(document.getElementById('fecha').value) || new Date().toLocaleDateString('es-MX')}`, 20, 52); let odontoY = 62; try { const canvas = await html2canvas(document.querySelector('.odontograma-completo'), { scale: 0.7, useCORS: true, allowTaint: true }); const imgData = canvas.toDataURL('image/png'); const imgWidth = 180; const imgHeight = (canvas.height * imgWidth) / canvas.width; doc.addImage(imgData, 'PNG', (pageWidth - imgWidth) / 2, odontoY, imgWidth, imgHeight); odontoY += imgHeight + 10; } catch (e) { console.warn('No se pudo capturar el odontograma:', e); odontoY = 62; } if (tratamientos.length > 0) { const data = tratamientos.map(t => [String(t.diente), limpiarTextoExport(t.tratamiento), `$${Number(t.precio || 0).toFixed(2)}`]); doc.autoTable({ startY: odontoY, head: [[getTexto('thDiente'), getTexto('thTratamiento'), getTexto('thPrecio')]], body: data, theme: 'grid', styles: { fontSize: 14 }, headStyles: { fillColor: [52, 152, 219] } }); let finalY = (doc.lastAutoTable && doc.lastAutoTable.finalY) ? doc.lastAutoTable.finalY + 10 : odontoY + 60; doc.text(`${getTexto('total')}: $${document.getElementById('total-monto').textContent}`, 20, finalY); if (descuentoPorcentaje > 0) { finalY += 10; doc.text(`${getTexto('totalConDescuento')}: $${totalConDescuento.toFixed(2)}`, 20, finalY); } } else { doc.text('No hay tratamientos registrados', 20, odontoY + 10); } const filename = `presupuesto_${sanitizarNombre(document.getElementById('nombre').value || 'paciente')}.pdf`; doc.save(filename); } function exportarEvolucionPDF() { if (!historiaClinica.evolucion || historiaClinica.evolucion.length === 0) { mostrarNotificacion(getTexto('errorNoEvolucion'), 'error'); return; } const doc = new jsPDF(); const pageWidth = doc.internal.pageSize.getWidth(); doc.setFontSize(18); doc.text(quitarAcentos(getTexto('tituloEvolucionPDF')), pageWidth / 2, 20, { align: 'center' }); doc.setFontSize(11); doc.text(`Paciente: ${limpiarTextoExport(document.getElementById('nombre').value) || 'N/A'}`, 20, 34); doc.text(`Fecha: ${new Date().toLocaleDateString('es-MX')}`, 20, 42); let saldoAcumulado = 0; const data = historiaClinica.evolucion.map(e => { if (e.tipo === 'abono') { saldoAcumulado -= Number(e.monto || 0); return [formatearFechaDDMMYYYY(e.fecha) || '', `Abono${e.nota ? ': ' + e.nota : ''}`, "—", "—", `$${Number(e.monto || 0).toFixed(2)}`, `$${Math.abs(saldoAcumulado).toFixed(2)} ${saldoAcumulado > 0 ? getTexto('adeudo') : getTexto('aFavor')}`]; } else { saldoAcumulado += (Number(e.costo || 0) - Number(e.abono || 0)); return [formatearFechaDDMMYYYY(e.fecha) || '', e.tratamiento || '', e.diente || '', `$${Number(e.costo || 0).toFixed(2)}`, `$${Number(e.abono || 0).toFixed(2)}`, `$${Math.abs(saldoAcumulado).toFixed(2)} ${saldoAcumulado > 0 ? getTexto('adeudo') : getTexto('aFavor')}`]; } }); doc.autoTable({ startY: 52, head: [[getTexto('thFechaEvol'), getTexto('thTratamientoEvol'), getTexto('thDienteEvol'), getTexto('thCostoEvol'), getTexto('thAbonoEvol'), getTexto('thSaldoEvol')]], body: data, theme: 'grid', styles: { fontSize: 14 }, headStyles: { fillColor: [155, 89, 182] } }); doc.save(`evolucion_${sanitizarNombre(document.getElementById('nombre').value || 'paciente')}.pdf`); } async function exportarWord() { if (!window.docx) { mostrarNotificacion('docx library not loaded', 'error'); return; } if (tratamientos.length === 0) { mostrarNotificacion(getTexto('errorNoTratamientos'), 'error'); return; } const { Document, Paragraph, Table, TableRow, TableCell, WidthType, ImageRun } = docx; let imageBase64 = null; try { const canvas = await html2canvas(document.querySelector('.odontograma-completo'), { scale: 0.5 }); imageBase64 = canvas.toDataURL('image/png'); } catch (e) { console.warn('No se pudo capturar el odontograma para Word'); } const nombrePaciente = limpiarTextoExport(document.getElementById('nombre').value) || 'PACIENTE'; const nombreDoctor = limpiarTextoExport(document.getElementById('doctor').value) || 'Doctor'; const fecha = limpiarTextoExport(document.getElementById('fecha').value) || new Date().toLocaleDateString('es-MX'); const children = [ new Paragraph({ text: quitarAcentos(getTexto('tituloPresupuesto')), heading: "Heading1", alignment: "center" }), new Paragraph(`Paciente: ${nombrePaciente}`), new Paragraph(`${getTexto('labelDoctor')}: ${nombreDoctor}`), new Paragraph(`Fecha: ${fecha}`), new Paragraph("") ]; if (imageBase64) { const imageBuffer = Uint8Array.from(atob(imageBase64.split(',')[1]), c => c.charCodeAt(0)); children.push( new Paragraph({ children: [ new ImageRun({ data: imageBuffer, transformation: { width: 450, height: (imageBuffer.length % 300) + 150 } }) }) ], alignment: "center" }), new Paragraph("") ); } const tableData = [ ["Diente", "Tratamiento", "Precio"] ]; tratamientos.forEach(t => { tableData.push([String(t.diente), t.tratamiento, `$${Number(t.precio || 0).toFixed(2)}`]); }); tableData.push(["", "Total:", `$${document.getElementById('total-monto').textContent}`]); if (descuentoPorcentaje > 0) { tableData.push(["", "Total con descuento:", `$${totalConDescuento.toFixed(2)}`]); } children.push( new Table({ rows: tableData.map(row => new TableRow({ children: row.map(cellText => new TableCell({ children: [new Paragraph(cellText)] }) })), width: { size: 100, type: WidthType.PERCENTAGE } }) })); const doc = new Document({ sections: [{ children: children }] }); docx.Packer.toBlob(doc).then(blob => { const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `presupuesto_${sanitizarNombre(nombrePaciente)}.docx`; a.click(); URL.revokeObjectURL(url); }); } function exportarEvolucionWord() { if (!window.docx) { mostrarNotificacion('docx library not loaded', 'error'); return; } if (!historiaClinica.evolucion || historiaClinica.evolucion.length === 0) { mostrarNotificacion(getTexto('errorNoEvolucion'), 'error'); return; } const { Document, Paragraph, Table, TableRow, TableCell, WidthType } = docx; const nombrePaciente = limpiarTextoExport(document.getElementById('nombre').value) || 'PACIENTE'; const children = [ new Paragraph({ text: quitarAcentos(getTexto('tituloEvolucionPDF')), heading: "Heading1", alignment: "center" }), new Paragraph(`Paciente: ${nombrePaciente}`), new Paragraph(`Fecha: ${new Date().toLocaleDateString('es-MX')}`), new Paragraph("") ]; const tableData = [ [getTexto('thFechaEvol'), getTexto('thTratamientoEvol'), getTexto('thDienteEvol'), getTexto('thCostoEvol'), getTexto('thAbonoEvol'), getTexto('thSaldoEvol')]]; let saldoAcumulado = 0; historiaClinica.evolucion.forEach(e => { if (e.tipo === 'abono') { saldoAcumulado -= Number(e.monto || 0); tableData.push([formatearFechaDDMMYYYY(e.fecha) || '', `Abono${e.nota ? ': ' + e.nota : ''}`, "—", "—", `$${Number(e.monto || 0).toFixed(2)}`, `$${Math.abs(saldoAcumulado).toFixed(2)} ${saldoAcumulado > 0 ? getTexto('adeudo') : getTexto('aFavor')}`]); } else { saldoAcumulado += (Number(e.costo || 0) - Number(e.abono || 0)); tableData.push([formatearFechaDDMMYYYY(e.fecha) || '', e.tratamiento || '', e.diente || '', `$${Number(e.costo || 0).toFixed(2)}`, `$${Number(e.abono || 0).toFixed(2)}`, `$${Math.abs(saldoAcumulado).toFixed(2)} ${saldoAcumulado > 0 ? getTexto('adeudo') : getTexto('aFavor')}`]); } }); children.push( new Table({ rows: tableData.map(row => new TableRow({ children: row.map(cellText => new TableCell({ children: [new Paragraph(cellText)] }) })) }), width: { size: 100, type: WidthType.PERCENTAGE } }) }) ); const doc = new Document({ sections: [{ children: children }] }); docx.Packer.toBlob(doc).then(blob => { const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `evolucion_${sanitizarNombre(nombrePaciente)}.docx`; a.click(); URL.revokeObjectURL(url); }); } function mostrarAdeudos() { let modal = document.getElementById('modalAdeudos'); if (!modal) { modal = document.createElement('div'); modal.id = 'modalAdeudos'; modal.className = 'modal'; modal.innerHTML = `<div class="modal-content"><h3>Resumen de Adeudos</h3><div id="contenido-adeudos"><p>Cargando...</p></div><button class="btn-cerrar" onclick="cerrarModalAdeudos()">Cerrar</button></div>`; document.body.appendChild(modal); } function cerrarModalAdeudos() { document.getElementById('modalAdeudos').style.display = 'none'; } function descargarRespaldoExcel() { if (!window.XLSX) { mostrarNotificación('XLSX library not loaded', 'error'); return; } const datosParaExcel = pacientes.map(p => { const fila = { 'ID': p._id || '', 'Nombre': p.nombre || '', 'Correo': p.correo || '', 'Celular': p.celular || '', 'Edad': p.edad || '', 'Doctor': p.doctor || '', 'Fecha': p.fecha || '', 'Antecedentes': (p.historiaClinica && p.historiaClinica.antecedentes) || '', 'Motivo': (p.historiaClinica && p.historiaClinica.motivo) || '', 'Diagnóstico': (p.historiaClinica && p.historiaClinica.diagnostico) || '' }; if (p.tratamientos && p.tratamientos.length > 0) { p.tratamientos.forEach((t, i) => { if (i < 10) { fila[`Tratamiento ${i+1}`] = `${t.diente}: ${t.tratamiento} ($${t.precio})`; } }); } return fila; }); const wb = XLSX.utils.book_new(); const ws = XLSX.utils.json_to_sheet(datosParaExcel); XLSX.utils.book_append_sheet(wb, ws, "Pacientes"); XLSX.writeFile(wb, `respaldo_pacientes_${new Date().toISOString().split('T')[0]}.xlsx`); mostrarNotificacion('Respaldo descargado correctamente'); } function abrirModalCargaExcel() { document.getElementById('modalCargaExcel').style.display = 'flex'; } function cerrarModalCargaExcel() { document.getElementById('modalCargaExcel').style.display = 'none'; } function cargarPacientesDesdeExcel() { const file = document.getElementById('archivo-excel').files[0]; if (!file) { mostrarNotificacion('Por favor seleccione un archivo Excel', 'error'); return; const reader = new FileReader(); reader.onload = function(e) { try { const data = new Uint8Array(e.target.result); const workbook = XLSX.read(data, { type: 'array' }); const firstSheet = workbook.Sheets[workbook.SheetNames[0]]; const jsonData = XLSX.utils.sheet_to_json(firstSheet); let cargados = 0; let errores = 0; jsonData.forEach(async (row, index) => { try { const pacienteData = { nombre: row.nombre || row.Nombre || '', correo: row.correo || row.Correo || '', celular: row.celular || row.Celular || '', edad: row.edadad || row.Edad || '', doctor: row.doctor || row.Doctor || '', fecha: row.fecha || row.Fecha || '', tratamientos: [], historiaClinica: { antecedentes: row.antecedentes || row.Antecedentes || '', motivo: row.motivo || row.Motivo || '', diagnostico: row.diagnostico || row.Diagnóstico || '', evolucion: [], radiografias: [] } }; if (pacienteData.nombre) { await guardarPacienteEnAPI(pacienteData); cargados++; } else { errores++; } if (index === jsonData.length - 1) { setTimeout(() => { mostrarNotificación(`Proceso completado. ${cargados} pacientes cargados, ${errores} errores.`); cerrarModalCargaExcel(); cargarPacientesDesdeAPI(); }, 1000); } } catch (error) { console.error('Error al procesar el archivo:', error); mostrarNotificacion('Error al procesar el archivo. Verifique el formato.', 'error'); } }; reader.readAsArrayBuffer(file); } function toggleModoOscuro() { document.body.classList.toggle('modo-oscuro'); const esModoOscuro = document.body.classList.contains('modo-oscuro'); localStorage.setItem('modoOscuro', esModoOscuro); document.getElementById('btn-modo-oscuro').textContent = esModoOscuro ? '☀️ Modo Claro' : '🌙 Modo Oscuro'; } function mostrarNotificacion(mensaje, tipo = 'success') { const notificacion = document.createElement('div'); notificacion.className = 'notificacion'; notificacion.textContent = mensaje; if (tipo === 'error') { notificacion.style.background = '#e74c3c'; } document.body.appendChild(notificacion); setTimeout(() => { notificacion.remove(); }, 3000); }

// ✅ NUEVO: Función para cargar tratamientos desde la API
async function cargarTratamientosGlobalesDesdeAPI() { try { const token = localStorage.getItem('token'); const response = await fetch(`${API_URL}/tratamientos-globales`, { headers: { 'Authorization': `Bearer ${token}` } }); if (!response.ok) throw new Error('Error al cargar tratamientos'); const tratamientos = await response.json(); window.tratamientosGlobales = tratamientos; console.log('Tratamientos globales cargados desde la API:', tratamientos); } catch (error) { console.error('Error:', error); mostrarNotificacion('Error al cargar los tratamientos.', 'error'); } }

// ✅ NUEVO: Función para guardar un tratamiento en la API
async function guardarTratamientoGlobalEnAPI(datosTratamiento) { try { const token = localStorage.getItem('token'); const response = await fetch(`${API_URL}/tratamientos-globales`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(datosTratamiento) }); if (!response.ok) throw new Error('Error al guardar el tratamiento'); await cargarTratamientosGlobalesDesdeAPI(); cerrarModalGestionTratamientos(); mostrarNotificacion('Tratamiento guardado correctamente'); } catch (error) { console.error('Error:', error); mostrarNotificacion('Error al guardar el tratamiento.', 'error'); } }

// ✅ NUEVO: Función para renderizar el modal de gestión
function renderizarTratamientosGlobales() { const contenedor = document.getElementById('lista-tratamientos-globales'); if (!contenedor) return; contenedor.innerHTML = ''; if (!window.tratamientosGlobales || window.tratamientosGlobales.length === 0) { contenedor.innerHTML = '<p>No hay tratamientos registrados.</p>'; return; } window.tratamientosGlobales.forEach((t, i) => { const div = document.createElement('div'); div.className = 'tratamiento-global'; div.style.display = 'flex'; div.style.justifyContent = 'space-between'; div.style.alignItems = 'center'; div.innerHTML = `<span>${t.nombre} ($${t.precio})</span><div><button class="btn-editar" onclick="abrirModalEditarTratamiento('${t._id}', '${t.nombre}', ${t.precio}')">✏️</button><button class="btn-eliminar" onclick="eliminarTratamientoGlobalEnAPI('${t._id}')">🗑️</button></div>`; contenedor.appendChild(div); }); }

// ✅ NUEVO: Función para abrir el modal de edición
function abrirModalEditarTratamiento(id, nombre, precio) { document.getElementById('nuevoNombreTratamiento').value = nombre; document.getElementById('nuevoPrecioTratamiento').value = precio; document.getElementById('modalNuevoTratamiento').dataset.editandoId = id; document.getElementById('titulo-modal-nuevo-tratamiento').textContent = 'Editar Tratamiento'; document.getElementById('modalNuevoTratamiento').style.display = 'flex'; }

// ✅ MODIFICADA: Función para guardar desde el modal (ahora maneja creación y edición)
function agregarTratamientoGlobal() { const nombre = document.getElementById('nuevoNombreTratamiento').value.trim(); const precio = parseFloat(document.getElementById('nuevoPrecioTratamiento').value); if (!nombre || isNaN(precio) || precio < 0) { mostrarNotificacion('Por favor complete todos los campos correctamente.', 'error'); return; } const editandoId = document.getElementById('modalNuevoTratamiento').dataset.editandoId; const datosTratamiento = { nombre, precio }; if (editandoId) { console.log('Actualizar tratamiento con ID:', editandoId); // Lógica para actualizar (aún no implementada, pero puedes añadirla) } else { guardarTratamientoGlobalEnAPI(datosTratamiento); } }

// ✅ MODIFICADA: Función para abrir el modal principal
function abrirModalGestionTratamientos() { renderizarTratamientosGlobales(); document.getElementById('modalGestionTratamientos').style.display = 'flex'; }

// ✅ MODIFICADA: Función para cerrar el modal de nuevo tratamiento
function cerrarModalNuevoTratamiento() { document.getElementById('modalNuevoTratamiento').style.display = 'none'; document.getElementById('modalNuevoTratamiento').dataset.editandoId = ''; document.getElementById('nuevoNombreTratamiento').value = ''; document.getElementById('nuevoPrecioTratamiento').value = ''; }

// ✅ NUEVO: Función para eliminar un tratamiento
async function eliminarTratamientoGlobalEnAPI(id) { if (!confirm('¿Está seguro de eliminar este tratamiento?')) return; try { const token = localStorage.getItem('token'); const response = await fetch(`${API_URL}/tratamientos-globales/${id}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } }); if (!response.ok) throw new Error('Error al eliminar el tratamiento'); await cargarTratamientosGlobalesDesdeAPI(); mostrarNotificacion('Tratamiento eliminado correctamente'); } catch (error) { console.error('Error:', error); mostrarNotificacion('Error al eliminar el tratamiento.', 'error'); } }

// ... (El resto de tus funciones como exportarPDF, etc. no cambian) ...

// ✅ MODIFICADO: La función `seleccionarDiente` ahora usa los tratamientos globales cargados desde la API
function seleccionarDiente(num) { dienteSeleccionado = num; document.getElementById('dienteActual').textContent = num; const contenedor = document.getElementById('opciones-tratamientos'); contenedor.innerHTML = ''; const listaActual = window.tratamientosGlobales || []; listaActual.forEach(t => { const div = document.createElement('div'); div.className = 'opcion-tratamiento'; div.setAttribute('role', 'button'); div.setAttribute('tabindex', '0'); div.innerHTML = `<span>${t.nombre}</span> <span>$${t.precio}</span>`; div.onclick = () => aplicarTratamiento(t.nombre, t.precio); contenedor.appendChild(div); }); document.getElementById('modalTratamiento').style.display = 'flex'; }

// ... (El resto de tus funciones) ...

// ✅ MODIFICADO: Al iniciar la aplicación, carga los tratamientos desde la API
document.addEventListener('DOMContentLoaded', async () => {
  // Cargar modo oscuro
  const esModoOscuro = localStorage.getItem('modoOscuro') === 'true';
  if (esModoOscuro) {
    document.body.classList.add('modo-oscuro');
    document.getElementById('btn-modo-oscuro').textContent = '☀️ Modo Claro';
  }
  
  // Cargar pacientes y tratamientos desde la API
  await cargarPacientesDesdeAPI();
  await cargarTratamientosGlobalesDesdeAPI();
  
  // Inicializar odontograma
  dibujarOdontograma();
  
  // Establecer fecha actual
  const hoy = new Date().toISOString().split('T')[0];
  document.getElementById('fecha').value = hoy;
});
